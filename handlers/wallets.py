from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile
from aiogram.enums import ParseMode

from database.repository import (
    get_user_wallets,
    add_user_wallet,
    set_active_wallet,
    delete_user_wallet,
    session, get_user_language
)
from database.models import User
from utils.validators import validate_ton_address
from utils.keyboards import (
    create_wallets_keyboard,
    create_back_to_wallets_keyboard,
    create_delete_wallet_keyboard,
    create_delete_confirmation_keyboard
)
from config import Config

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏
class DeleteWalletStates(StatesGroup):
    select_wallet = State()
    confirm = State()

class SellerStates(StatesGroup):
    wait_ton_address_in_wallet = State()
    select_wallet = State()  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å

# –í–°–ï –í–ê–®–ò –§–£–ù–ö–¶–ò–ò –° –ö–û–®–ï–õ–¨–ö–ê–ú–ò –í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê
# –ù–∞–ø—Ä–∏–º–µ—Ä:
@router.callback_query(F.data == "wallet")
async def show_wallets(callback: CallbackQuery):
    user_lang = get_user_language(callback.from_user.id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    if not user:
        user = User(telegram_id=callback.from_user.id, username=callback.from_user.username, wallets=[])
        session.add(user)
        session.commit()
    wallets = user.wallets
    active_wallet = user.active_wallet

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    wallets_text = "<b>üíº –í–∞—à–∏ –ö–û–®–ï–õ–¨–ö–ò:</b>\n\n" + (
        "\n".join([
            f"{i + 1}.<code>{w}</code> {'‚úÖ' if w == active_wallet else ''}"
            for i, w in enumerate(wallets)
        ]) if wallets else "üò≠–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"
    )

    await callback.message.delete()
    await callback.message.answer_photo(
        photo=FSInputFile("assets/wallets.png"),
        caption=wallets_text,
        parse_mode=ParseMode.HTML,
        reply_markup=create_wallets_keyboard(wallets, active_wallet, user_lang)
    )


@router.callback_query(F.data.startswith("select_wallet_"))
async def select_wallet(callback: CallbackQuery):
    wallet_idx = int(callback.data.split("_")[-1]) - 1
    wallets = get_user_wallets(callback.from_user.id)

    if 0 <= wallet_idx < len(wallets):
        selected_wallet = wallets[wallet_idx]
        set_active_wallet(callback.from_user.id, selected_wallet)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
        await show_wallets(callback)  # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await callback.answer(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: {selected_wallet}")

# –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫"
@router.callback_query(F.data == "add_wallet")
async def add_wallet(callback: CallbackQuery, state: FSMContext):
    user_lang = get_user_language(callback.from_user.id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    await callback.message.delete()
    await callback.message.answer(
        "üì• <b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å TON-–∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: EQ... –∏–ª–∏ UQ...",
        parse_mode=ParseMode.HTML,
        reply_markup=create_back_to_wallets_keyboard(user_lang)
    )
    await state.set_state(SellerStates.wait_ton_address_in_wallet)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
@router.message(SellerStates.wait_ton_address_in_wallet)
async def process_add_wallet(message: Message, state: FSMContext):
    user_lang = get_user_language(message.from_user.id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    if not validate_ton_address(message.text):
        await message.answer_photo(
        photo=FSInputFile("assets/error.png"),
        caption=
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞!</b>\n"
            "–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å EQ –∏–ª–∏ UQ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 48 —Å–∏–º–≤–æ–ª–æ–≤",
            parse_mode=ParseMode.HTML,
            reply_markup=create_back_to_wallets_keyboard(user_lang)
        )
        return
    add_user_wallet(message.from_user.id, message.text)
    await message.answer(
        "‚úÖ <b>–ö–æ—à–µ–ª–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_back_to_wallets_keyboard(user_lang)
    )
    await state.clear()


# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è:
@router.callback_query(F.data == "delete_wallet")
async def delete_wallet(callback: CallbackQuery, state: FSMContext):
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    wallets = user.wallets if user else []

    if not wallets:
        await callback.answer_photo(
        photo=FSInputFile("assets/error.png"),
        caption="–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤", show_alert=True)
        return
    user_lang = get_user_language(callback.from_user.id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    await callback.message.delete()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n" +
        "\n".join([f"{i + 1}.{wallet}" for i, wallet in enumerate(wallets)]),
        reply_markup=create_delete_wallet_keyboard(wallets, user_lang)
    )
    await state.set_state(DeleteWalletStates.select_wallet)


# –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞:
@router.callback_query(DeleteWalletStates.select_wallet, F.data.startswith("delete_select_"))
async def confirm_deletion(callback: CallbackQuery, state: FSMContext):
    wallet_idx = int(callback.data.split("_")[-1])
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()

    if not user or wallet_idx >= len(user.wallets):
        await callback.answer_photo(
        photo=FSInputFile("assets/error.png"),
        caption="–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞", show_alert=True)
        return

    selected_wallet = user.wallets[wallet_idx]
    await state.update_data(selected_wallet=selected_wallet)
    user_lang = get_user_language(callback.from_user.id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    await callback.message.delete()
    await callback.message.answer(
        f"–£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫?\n\n{selected_wallet}",
        reply_markup=create_delete_confirmation_keyboard(user_lang)
    )
    await state.set_state(DeleteWalletStates.confirm)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(DeleteWalletStates.confirm)
async def process_deletion(callback: CallbackQuery, state: FSMContext):
    if callback.data == "cancel_delete":
        await show_wallets(callback)
        await state.clear()
        return

    data = await state.get_data()
    wallet = data.get("selected_wallet")
    delete_user_wallet(callback.from_user.id, wallet)

    await callback.answer("‚úÖ –ö–æ—à–µ–ª–µ–∫ —É–¥–∞–ª–µ–Ω", show_alert=True)
    await show_wallets(callback)
    await state.clear()