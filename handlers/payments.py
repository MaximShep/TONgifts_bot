from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest

from handlers.deals import BuyerStates
from locales import get_text
from ton_service import TonService
from database.repository import update_deal_status, get_deal_by_id, get_user_language, get_username, \
    add_referral_revenue, revenue_update, update_last_activity, get_deal_by_hex
from utils.keyboards import create_payment_keyboard, close_keyboard, \
    transfer_nft, create_back_to_menu_keyboard, support_button  # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
from config import Config
from utils.nft_checker import check_nft_owner
import asyncio
from database.repository import session  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏
from database.models import User  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é User


router = Router()
ton_service = TonService()


@router.callback_query(F.data.startswith("start_payment_"))
async def start_payment(callback: CallbackQuery, state: FSMContext):
    deal_id = callback.data.split("_")[2]
    deal = get_deal_by_id(deal_id)
    user_lang = get_user_language(callback.from_user.id)
    if not deal:
        await callback.answer(get_text('deal_not_found', user_lang))
        return

    if deal.status == 'canceled' or deal.status == 'time_out':
        user_lang = get_user_language(callback.message.from_user.id)
        await callback.message.answer(
            caption=get_text('canceled', user_lang)
        )
        return

    telegram_id = callback.from_user.id
    user_lang = get_user_language(telegram_id)
    await update_last_activity(telegram_id)

    amount = deal.comission_price
    comment = f"DEAL_{deal.id}"
    update_deal_status(deal.id, "start_payment")

    await callback.message.answer(
        get_text('send_ton_payment', user_lang).format(
            amount=amount,
            ton_address=Config.ADMIN_TON_ADDRESS,
            comment=comment,
            deal_id=deal.id,
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=create_payment_keyboard(int(amount * 10 ** 9), comment, user_lang)
    )

    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    asyncio.create_task(automatic_payment_monitor(callback, deal))

    seller_lang = get_user_language(deal.seller_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    await callback.message.bot.send_message(
        chat_id=deal.seller_id,
        text=get_text('payment_started_notification', seller_lang),
        reply_markup=close_keyboard(seller_lang)
    )


async def automatic_payment_monitor(callback: CallbackQuery, deal):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã"""
    max_time = 900  # 15 –º–∏–Ω—É—Ç
    interval = 5  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    deal_id = callback.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–¥–µ–ª–∫–∏ [[8]]
    deal = get_deal_by_id(deal_id)
    print(deal_id)

    for _ in range(max_time // interval):
        if await ton_service.check_payment(deal.id, deal.comission_price):
            await process_payment(callback, deal)
            return
        await asyncio.sleep(interval)
    buyer_lang = get_user_language(deal.buyer_id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    seller_lang = get_user_language(deal.seller_id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞

    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
    await callback.message.bot.send_message(
        chat_id=deal.buyer_id,
        text=get_text('payment_timeout', buyer_lang),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=close_keyboard(buyer_lang)
    )
    await callback.message.bot.send_message(
        chat_id=deal.seller_id,
        text=get_text('payment_timeout', seller_lang),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=close_keyboard(seller_lang)
    )
    update_deal_status(deal.id, "canceled")


async def process_payment(callback: CallbackQuery, deal):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É"""
    user_lang = get_user_language(callback.from_user.id)
    update_deal_status(deal.id, "payment_received")

    username = get_username(deal.buyer_id)

    await callback.message.answer(
        get_text('payment_confirmed', user_lang),
        parse_mode = ParseMode.HTML,

    )
    await callback.message.bot.send_message(
        chat_id=deal.seller_id,
        text=get_text('payment_received_notification', user_lang).format(username=username),
        parse_mode=ParseMode.HTML,
        reply_markup=transfer_nft(username, user_lang)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ transfer_nft –ø—Ä–∏–Ω–∏–º–∞–µ—Ç user_lang
    )

    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ NFT
    asyncio.create_task(monitor_nft_transfer(callback, deal))


async def monitor_nft_transfer(callback: CallbackQuery, deal):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É NFT –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    user_lang = get_user_language(callback.from_user.id)
    max_time = 900  # 15 –º–∏–Ω—É—Ç
    interval = 3

    for _ in range(max_time // interval):
        nft_owner = check_nft_owner(deal.gift_name[0])
        buyer_username = callback.from_user.username

        if nft_owner == buyer_username:
            await finalize_deal(callback, deal)
            return

        await asyncio.sleep(interval)

    # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    await callback.message.answer(get_text('payment_timeout_refund', user_lang))
    await ton_service.refund_payment(deal.buyer_address, deal.comission_price)
    update_deal_status(deal.id, "refunded")

async def finalize_deal(callback: CallbackQuery, deal):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–¥–µ–ª–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞"""
    buyer_lang = get_user_language(deal.buyer_id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    seller_lang = get_user_language(deal.seller_id)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ NFT
    await callback.message.bot.send_message(
        chat_id=deal.buyer_id,
        text=get_text('deal_completed_buyer', buyer_lang).format(link="https://t.me/mivelon_info"),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=create_back_to_menu_keyboard(buyer_lang)
    )
    success = await ton_service.transfer_funds(deal.ton_address, deal.price, deal.id)
    # –û–∂–∏–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∏–∏

    if success:
        update_deal_status(deal.id, "completed")
        fee = None
        while fee is None:
            fee = await ton_service.find_transaction(deal.id)
            if fee is None:
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            else:
                fee = fee / (10 ** 9)
        buyer = session.query(User).filter_by(telegram_id=deal.buyer_id).first()
        seller = session.query(User).filter_by(telegram_id=deal.seller_id).first()
        print(fee)
        if buyer.invited_by is not None and seller.invited_by is not None:
            referal_sum = ((deal.comission_price - fee)*Config.REFERAL_COMMISSION)/2
            our_revenue = deal.comission_price -fee- (referal_sum*2)
            add_referral_revenue(deal.buyer_id, referal_sum)
            add_referral_revenue(deal.seller_id, referal_sum)
        elif buyer.invited_by is not None:
            referal_sum = (deal.comission_price - fee)*Config.REFERAL_COMMISSION
            our_revenue = deal.comission_price - fee - referal_sum
            add_referral_revenue(deal.buyer_id, referal_sum)
        elif seller.invited_by is not None:
            referal_sum = (deal.comission_price - fee)*Config.REFERAL_COMMISSION
            our_revenue = deal.comission_price - fee - referal_sum
            add_referral_revenue(deal.seller_id, referal_sum)
        else:
            our_revenue = deal.comission_price - fee
        revenue_update(deal.id, our_revenue)
        await callback.message.bot.send_message(
            chat_id=deal.seller_id,
            text=get_text('deal_completed_seller', seller_lang).format(price=deal.price,link="https://t.me/mivelon_info"),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=create_back_to_menu_keyboard(seller_lang)
        )
        await callback.message.bot.send_message(
            chat_id=-1002751170506,
            text=f"<b>–°–¥–µ–ª–∫–∞ #{deal.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                 f"üõçÔ∏è NFT: {deal.gift_name[0]}\n"
                 f"üí∞ –¶–µ–Ω–∞ (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏): {deal.price} TON\n\n"
                 f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{get_username(deal.seller_id)} [{deal.seller_id}]\n"
                 f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{get_username(deal.buyer_id)} [{deal.buyer_id}]\n\n"
                 f"<b>üí∞ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ (c —Å–∫–æ–º–∏—Å—Å–∏–µ–π): {deal.comission_price} TON</b>",
            message_thread_id=4,
            parse_mode=ParseMode.HTML
        )

    else:
        await callback.message.bot.send_message(
            chat_id=deal.seller_id,
            text=get_text("transfer_money_error", seller_lang),
            reply_markup = support_button(seller_lang)
        )

        keyboard_transfererror = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"refresh_transfererror_{deal.id}")]
        ])
        await callback.message.bot.send_message(
            chat_id=-1002751170506,
            text=f"<b>–°–¥–µ–ª–∫–∞ #{deal.id} –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞!</b>\n\n"
                 f"üõçÔ∏è NFT: {deal.gift_name[0]}\n"
                 f"üí∞ –¶–µ–Ω–∞ (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏): {deal.price} TON\n\n"
                 f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{get_username(deal.seller_id)} [{deal.seller_id}]\n"
                 f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{get_username(deal.buyer_id)} [{deal.buyer_id}]\n\n"
                 f"<b>üí∞ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ (c —Å–∫–æ–º–∏—Å—Å–∏–µ–π): {deal.comission_price} TON</b>",
            message_thread_id=186,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard_transfererror
        )

        @router.callback_query(F.data.startswith("refresh_transfererror_"))
        async def refresh_transfererror_handler(callback: CallbackQuery):
            deal_id = callback.data.split("_")[-1]

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            deal = get_deal_by_hex(deal_id)
            update_deal_status(deal_id, 'completed')
            updated_text = (
                f"<b>–°–¥–µ–ª–∫–∞ #{deal.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üõçÔ∏è NFT: {deal.gift_name[0]}\n"
                f"üí∞ –¶–µ–Ω–∞ (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏): {deal.price} TON\n\n"
                f"–ü—Ä–æ–¥–∞–≤–µ—Ü: @{get_username(deal.seller_id) if deal.seller_id is not None else '‚Äî'} [{deal.seller_id if deal.seller_id is not None else '‚Äî'}]\n"
                f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{get_username(deal.buyer_id) if deal.buyer_id is not None else '‚Äî'} [{deal.buyer_id if deal.buyer_id is not None else '‚Äî'}]\n\n"
                f"<b>üí∞ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ (c –∫–æ–º–∏—Å—Å–∏–µ–π): {deal.comission_price} TON</b>"
            )
            try:
                if callback.message.text != updated_text or callback.message.reply_markup != callback.message.reply_markup:
                    await callback.message.edit_text(
                        text=updated_text,
                        parse_mode=ParseMode.HTML
                    )
            except TelegramBadRequest as e:
                if "message is not modified" in e.message:
                    pass
                else:
                    raise
            await callback.answer()

# from aiogram import Router, F
# import asyncio
# from aiogram.types import CallbackQuery, Message
# from aiogram.fsm.context import FSMContext
#
# from handlers.deals import BuyerStates
# from ton_service import TonService
# from database.repository import update_deal_status, get_deal_by_id
# from utils.keyboards import create_payment_keyboard
# from config import Config
# from utils.nft_checker import check_nft_owner
# from dotenv import load_dotenv
# import os
# from aiogram.enums import ParseMode
#
#
# router = Router()
# ton_service = TonService()
#
#
# @router.callback_query(F.data.startswith("start_payment_"))
# async def start_payment(callback: CallbackQuery, state: FSMContext):
#     deal_id = callback.data.split("_")[2]
#     deal = get_deal_by_id(deal_id)
#     load_dotenv(".env")
#     amount = deal.comission_price  # –ö–æ–º–∏—Å—Å–∏—è 5%
#     comment = f"DEAL_{deal.id}"
#
#     await callback.message.answer(
#         f"üí∞ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ *{amount}* TON –Ω–∞ –∞–¥—Ä–µ—Å:\n"
#         f"`{Config.ADMIN_TON_ADDRESS}`\n\n"
#         f"‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–µ–º–æ): `{comment}`",
#         parse_mode=ParseMode.MARKDOWN,
#         reply_markup=create_payment_keyboard(deal.id)
#     )
#
#     # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ callback.message.bot (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ bot) [[8]]
#     await callback.message.bot.send_message(
#         chat_id=deal.seller_id,
#         text="–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
#     )
#     await state.set_state(BuyerStates.wait_payment_confirmation)  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è [[6]]
#
#
# @router.callback_query(F.data.startswith("confirm_payment_"))
# async def confirm_payment(callback: CallbackQuery):
#     deal_id = callback.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–¥–µ–ª–∫–∏ [[8]]
#     deal = get_deal_by_id(deal_id)
#
#     if not deal:
#         await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
#         print(f"–°–¥–µ–ª–∫–∞ {deal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ [[3]]
#         return
#
#     if ton_service.check_payment(deal.id, deal.comission_price):
#         await callback.message.answer("‚òëÔ∏è –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ NFT... \n–ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –≤–∞–º –Ω–∞ —Å—á–µ—Ç")
#         await callback.message.bot.send_message(chat_id=deal.seller_id, text="üéÅ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–µ—Ä–µ–¥–∞–π—Ç–µ NFT –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")
#         asyncio.create_task(monitor_nft_transfer(deal, callback))
#     else:
#         await callback.message.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å—É–º–º—É.")
#
#
#
# async def monitor_nft_transfer(deal, callback: CallbackQuery):
#     """
#     –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω NFT –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
#     –ï—Å–ª–∏ NFT –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, –æ—Ç–º–µ–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É.
#     """
#     max_time = 600  # 10 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
#     interval = 3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
#     elapsed_time = 0
#
#     while elapsed_time < max_time:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ NFT
#         nft_owner = check_nft_owner(deal.gift_name)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ NFT
#         buyer_username = callback.from_user.username
#
#         if nft_owner == buyer_username: #buyer_username:
#             # NFT —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
#             await confirm_gift(deal, callback)
#             return
#
#         await asyncio.sleep(interval)
#         elapsed_time += interval
#
#     # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç, –∞ NFT –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
#     update_deal_status(deal.id, "canceled")
#     await callback.message.answer("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. NFT –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
#     await ton_service.refund_payment(deal.buyer_address, deal.comission_price)  # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
# async def confirm_gift(deal, callback: CallbackQuery):
#     """
#     –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ NFT –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É.
#     """
#     await callback.message.bot.send_message(
#             chat_id=deal.buyer_id,
#             text=f"‚úÖ NFT –ø–æ–ª—É—á–µ–Ω! –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–ù–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö Mivelon Garant –≤ [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ](https://t.me/mivelon) üöÄ",
#             parse_mode=ParseMode.MARKDOWN
#         )
#
#     success = await ton_service.transfer_funds(deal.ton_address, deal.price, deal.id)
#     if success:
#         update_deal_status(deal.id, "completed")
#         await callback.message.bot.send_message(
#             chat_id=deal.seller_id,
#             text=f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {deal.price} TON\n\n–ù–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö Mivelon Garant –≤ [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ](https://t.me/mivelon) üöÄ",
#             parse_mode=ParseMode.MARKDOWN
#         )
#     else:
#         await callback.message.bot.send_message(
#             chat_id=deal.seller_id,
#             text="–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
#         )
#
