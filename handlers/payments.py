from aiogram import Router, F
import asyncio
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from handlers.deals import BuyerStates
from ton_service import TonService
from database.repository import update_deal_status, get_deal_by_id
from utils.keyboards import create_payment_keyboard
from config import Config
from utils.nft_checker import check_nft_owner
from dotenv import load_dotenv
import os
from aiogram.enums import ParseMode


router = Router()
ton_service = TonService()


@router.callback_query(F.data.startswith("start_payment_"))
async def start_payment(callback: CallbackQuery, state: FSMContext):
    deal_id = callback.data.split("_")[2]
    deal = get_deal_by_id(deal_id)
    load_dotenv(".env")
    amount = deal.comission_price  # –ö–æ–º–∏—Å—Å–∏—è 5%
    comment = f"DEAL_{deal.id}"

    await callback.message.answer(
        f"üí∞ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ *{amount}* TON –Ω–∞ –∞–¥—Ä–µ—Å:\n"
        f"`{Config.ADMIN_TON_ADDRESS}`\n\n"    
        f"‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–µ–º–æ): `{comment}`",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=create_payment_keyboard(deal.id)
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ —á–µ—Ä–µ–∑ callback.message.bot (–±–µ–∑ –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ bot) [[8]]
    await callback.message.bot.send_message(
        chat_id=deal.seller_id,
        text="–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    await state.set_state(BuyerStates.wait_payment_confirmation)  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è [[6]]


@router.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment(callback: CallbackQuery):
    deal_id = callback.data.split("_")[2]  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–¥–µ–ª–∫–∏ [[8]]
    deal = get_deal_by_id(deal_id)

    if not deal:
        await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print(f"–°–¥–µ–ª–∫–∞ {deal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ [[3]]
        return

    if ton_service.check_payment(deal.id, deal.comission_price):
        await callback.message.answer("‚òëÔ∏è –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ NFT... \n–ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–µ—Ä–Ω—É—Ç—Å—è –∫ –≤–∞–º –Ω–∞ —Å—á–µ—Ç")
        await callback.message.bot.send_message(chat_id=deal.seller_id, text="üéÅ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–µ—Ä–µ–¥–∞–π—Ç–µ NFT –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.")
        asyncio.create_task(monitor_nft_transfer(deal, callback))
    else:
        await callback.message.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å—É–º–º—É.")



async def monitor_nft_transfer(deal, callback: CallbackQuery):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω NFT –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.
    –ï—Å–ª–∏ NFT –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, –æ—Ç–º–µ–Ω—è–µ—Ç —Å–¥–µ–ª–∫—É.
    """
    max_time = 600  # 10 –º–∏–Ω—É—Ç (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    interval = 3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    elapsed_time = 0

    while elapsed_time < max_time:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ NFT
        nft_owner = check_nft_owner(deal.gift_name)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ NFT
        buyer_username = callback.from_user.username
        
        if nft_owner == buyer_username: #buyer_username:
            # NFT —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª—é
            await confirm_gift(deal, callback)
            return
        
        await asyncio.sleep(interval)
        elapsed_time += interval

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 10 –º–∏–Ω—É—Ç, –∞ NFT –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    update_deal_status(deal.id, "canceled")
    await callback.message.answer("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. NFT –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω. –î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    await ton_service.refund_payment(deal.buyer_address, deal.comission_price)  # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
async def confirm_gift(deal, callback: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ NFT –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–≤—Ü—É.
    """
    await callback.message.bot.send_message(
            chat_id=deal.buyer_id,
            text=f"‚úÖ NFT –ø–æ–ª—É—á–µ–Ω! –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–ù–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö Mivelon Garant –≤ [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ](https://t.me/mivelon) üöÄ",
            parse_mode=ParseMode.MARKDOWN   
        )

    success = await ton_service.transfer_funds(deal.ton_address, deal.price, deal.id)
    if success:
        update_deal_status(deal.id, "completed")
        await callback.message.bot.send_message(
            chat_id=deal.seller_id,
            text=f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {deal.price} TON\n\n–ù–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö Mivelon Garant –≤ [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ](https://t.me/mivelon) üöÄ",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await callback.message.bot.send_message(
            chat_id=deal.seller_id,
            text="–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

#
# from aiogram import Router, F
# from aiogram.types import CallbackQuery, Message
# from aiogram.fsm.context import FSMContext
# from aiogram.enums import ParseMode
#
# from handlers.deals import BuyerStates
# from ton_service import TonService
# from database.repository import update_deal_status, get_deal_by_id
# from utils.keyboards import create_payment_keyboard  # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
# from config import Config
# from utils.nft_checker import check_nft_owner
# import asyncio
#
# router = Router()
# ton_service = TonService()
#
#
# @router.callback_query(F.data.startswith("start_payment_"))
# async def start_payment(callback: CallbackQuery, state: FSMContext):
#     deal_id = callback.data.split("_")[2]
#     deal = get_deal_by_id(deal_id)
#
#     if not deal:
#         await callback.answer("–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
#         return
#
#     amount = deal.comission_price
#     comment = f"DEAL_{deal.id}"
#
#     await callback.message.answer(
#         f"üí∞ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ *{amount}* TON –Ω–∞ –∞–¥—Ä–µ—Å:\n"
#         f"`{Config.ADMIN_TON_ADDRESS}`\n\n"
#         f"‚ö†Ô∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: `{comment}`",
#         parse_mode=ParseMode.MARKDOWN
#     )
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
#     asyncio.create_task(automatic_payment_monitor(callback, deal))
#
#     # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞
#     await callback.message.bot.send_message(
#         chat_id=deal.seller_id,
#         text="–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
#     )
#
#
# async def automatic_payment_monitor(callback: CallbackQuery, deal):
#     """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã"""
#     max_time = 600  # 10 –º–∏–Ω—É—Ç
#     interval = 3  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
#
#     for _ in range(max_time // interval):
#         if await check_payment(deal):
#             await process_payment(callback, deal)
#             return
#         await asyncio.sleep(interval)
#
#     # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
#     await callback.message.answer("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
#     update_deal_status(deal.id, "canceled")
#
#
# async def check_payment(deal):
#     """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
#     return ton_service.check_payment(
#         deal_id=deal.id,
#         amount=deal.comission_price,
#         address=Config.ADMIN_TON_ADDRESS
#     )
#
#
# async def process_payment(callback: CallbackQuery, deal):
#     """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É"""
#     await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–∞...")
#     await callback.message.bot.send_message(
#         chat_id=deal.seller_id,
#         text="üéÅ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ü–µ—Ä–µ–¥–∞–π—Ç–µ NFT –ø–æ–∫—É–ø–∞—Ç–µ–ª—é."
#     )
#
#     # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥–∞—á–∏ NFT
#     asyncio.create_task(monitor_nft_transfer(callback, deal))
#
#
# async def monitor_nft_transfer(callback: CallbackQuery, deal):
#     max_time = 600  # 10 –º–∏–Ω—É—Ç
#     interval = 3
#
#     for _ in range(max_time // interval):
#         nft_owner = check_nft_owner(deal.gift_name)
#         buyer_username = callback.from_user.username
#
#         if nft_owner == buyer_username:
#             await finalize_deal(callback, deal)
#             return
#
#         await asyncio.sleep(interval)
#
#     # –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
#     await callback.message.answer("‚è≥ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–∏–Ω–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤...")
#     await ton_service.refund_payment(deal.buyer_address, deal.comission_price)
#     update_deal_status(deal.id, "refunded")
#
#
# async def finalize_deal(callback: CallbackQuery, deal):
#     """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–¥–µ–ª–∫—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞"""
#     await callback.message.bot.send_message(
#         chat_id=deal.buyer_id,
#         text=f"‚úÖ NFT –ø–æ–ª—É—á–µ–Ω! –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n–ù–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö Mivelon Garant –≤ [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ](https://t.me/mivelon) üöÄ",
#         parse_mode=ParseMode.MARKDOWN
#     )
#     success = await ton_service.transfer_funds(
#         to_address=deal.ton_address,
#         amount=deal.price,
#         deal_id=deal.id
#     )
#
#     if success:
#         update_deal_status(deal.id, "completed")
#         await callback.message.bot.send_message(
#             chat_id=deal.seller_id,
#             text=f"‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {deal.price} TON\n\n–ù–æ–≤–æ—Å—Ç–∏ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö Mivelon Garant –≤ [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ](https://t.me/mivelon) üöÄ",
#             parse_mode=ParseMode.MARKDOWN
#         )
#     else:
#         await callback.message.bot.send_message(
#             chat_id=deal.seller_id,
#             text="‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
#         )