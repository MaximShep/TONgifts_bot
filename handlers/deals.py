from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from utils.keyboards import create_role_keyboard, create_confirmation_keyboard, create_start_payment_keyboard, \
    create_welcome_keyboard, create_deal_wallet_selection, deal_address_keyboard_seller, deal_link_keyboard_seller
from utils.validators import validate_ton_address, validate_price, validate_tg_nft_link
from utils.hex_generator import generate_hex_id
from database.repository import save_deal, get_deal_by_hex, update_deal_buyer, save_or_update_user, update_deal_seller, update_ton_address, add_user_wallet, set_active_wallet
from config import Config
from aiogram.types import FSInputFile  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ [[3]]
from dotenv import load_dotenv
import os
from aiogram.enums import ParseMode
from database.models import User  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—å—é User
from database.repository import session  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Å—Å–∏–∏

router = Router()


class SellerStates(StatesGroup):
    wait_ton_address = State()
    wait_gift_name = State()
    wait_price = State()
    select_wallet_deal = State()



class BuyerStates(StatesGroup):
    wait_hex_code = State()
    wait_payment = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ
    wait_payment_confirmation = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å deep-–ª–∏–Ω–∫–æ–º ---
@router.message(CommandStart(deep_link=True))
async def handle_deep_link(message: Message, state: FSMContext, command: CommandStart):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –≤–∏–¥–∞ t.me/bot?start=HEX_ID [[5]][[8]]
    """
    hex_id = command.args  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ [[8]]
    await _join_deal(message, state, hex_id)

@router.message(CommandStart(deep_link=False))  # –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä [[8]]
async def cmd_start(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π [[1]]
    """
    await message.answer_photo(
        photo=FSInputFile("assets/startCover.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mivelon Guarantor!\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å NFT.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É:",
        reply_markup=create_welcome_keyboard()
    )
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ HEX-–∫–æ–¥–∞ ---
@router.message(BuyerStates.wait_hex_code)
async def process_hex_code(message: Message, state: FSMContext):
    hex_id = message.text.strip()
    await _join_deal(message, state, hex_id)


async def _join_deal(message: Message, state: FSMContext, hex_id: str):
    """
    –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ [[8]]
    """
    deal = get_deal_by_hex(hex_id)
    if not deal:
        await message.answer_photo(
        photo=FSInputFile("assets/error.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption="–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HEX-–∫–æ–¥.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏
    if deal.seller_id == message.from_user.id or deal.buyer_id == message.from_user.id:
        await message.answer_photo(
        photo=FSInputFile("assets/error.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption="–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
        return
    
    save_or_update_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username
    )




    if not deal.seller_id:
        update_deal_seller(deal.id, seller_id=message.from_user.id)
        await state.update_data(id=deal.id)
        await state.update_data(seller_id=message.from_user.id)
        await state.update_data(gift_name=deal.gift_name)
        await state.update_data(comission_price=deal.comission_price)
        await state.update_data(buyer_id=deal.buyer_id)
        await message.answer_photo(
        photo=FSInputFile("assets/hello.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption=
            f"<b>üîó –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ #{deal.id}</b>\n\n"
            f"üõçÔ∏è –í—ã –ø—Ä–æ–¥–∞–µ—Ç–µ: {deal.gift_name}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å NFT: {deal.price} TON\n"
            f"<i>(–∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞ 5% –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å)</i>",
            parse_mode=ParseMode.HTML,
        )
        await message.bot.send_photo(
            chat_id=deal.buyer_id,
            photo=FSInputFile("assets/hello.png"),
            caption=f"–ü—Ä–æ–¥–∞–≤–µ—Ü @{message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ!"
        )
        await message.answer("üí≥ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à TON-–∞–¥—Ä–µ—Å:")
        await state.set_state(SellerStates.wait_ton_address)
    else:
        update_deal_buyer(deal.id, buyer_id=message.from_user.id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await message.answer_photo(
        photo=FSInputFile("assets/hello.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption=
            f"<b>üîó –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ #{deal.id}</b>\n\n"
            f"üõçÔ∏è –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {deal.gift_name}\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{deal.comission_price} TON</b>\n\n"
            f"<i>–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏ (–ø—Ä–∏ —Å—É–º–º–µ —Å–¥–µ–ª–∫–∏ –º–µ–Ω–µ–µ 0.01 TON, –∫–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0.01 TON)</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=create_start_payment_keyboard(deal.id)
        )
        await message.bot.send_photo(
            chat_id=deal.seller_id,
            photo=FSInputFile("assets/hello.png"),
            caption=f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ!"
        )
        await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è [[6]]
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã

# --- –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—é ---

@router.message(F.text.in_({"/menu", "–ú–µ–Ω—é"}))
async def go_menu(message: Message, state: FSMContext):
    await message.answer_photo(
        photo=FSInputFile("assets/menu.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption="–ò –≤—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –≤ Mivelon Guarantor!\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å NFT.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É:",
        reply_markup=create_welcome_keyboard()
    )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await go_menu(callback.message, state)

@router.callback_query(F.data == "referral")
async def process_referral(callback: CallbackQuery):
    await callback.answer("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "language")
async def process_language(callback: CallbackQuery):
    await callback.answer("–í—ã–±–æ—Ä —è–∑—ã–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

# --- –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ (–ø—Ä–æ–¥–∞–≤–µ—Ü) ---

@router.message(F.text.in_({"/create_deal", "–°–¥–µ–ª–∫–∞"}))
async def start_deal_creation(message: Message, state: FSMContext):
    await message.answer_photo(
        photo=FSInputFile("assets/choose.png"),
        caption="üßë‚Äçüíª–í—ã–±–µ—Ä–∏—Ç–µ <u><b>–†–û–õ–¨</b></u> \n\n üéÅ<b>–ü—Ä–æ–¥–∞–≤–µ—Ü</b> - –≤–ª–∞–¥–µ–ª–µ—Ü –ø–æ–¥–∞—Ä–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç \n üí∏<b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</b> - —Ç–æ—Ç, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç —Ç–æ–Ω—ã \n\n <i>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏ –Ω—É–∂–Ω–∞ <u>—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫</u>, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=create_role_keyboard())
    await state.set_state(SellerStates.wait_ton_address)

@router.callback_query(F.data == "create_deal")
async def process_create_deal_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É" –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã /create_deal.
    """
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    # –í—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    await start_deal_creation(callback.message, state)


# --- –í—ã–±–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ ---
@router.callback_query(SellerStates.select_wallet_deal, F.data.startswith("choose_wallet_"))
async def select_deal_wallet(callback: CallbackQuery, state: FSMContext):
    wallet_idx = int(callback.data.split("_")[-1])
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    if wallet_idx < len(user.wallets):
        selected_wallet = user.wallets[wallet_idx]
        set_active_wallet(callback.from_user.id, selected_wallet)
        await callback.answer(f"–í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫: {selected_wallet}")
        await process_seller_role(callback, state)  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å


# --- –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" ---
@router.callback_query(SellerStates.select_wallet_deal, F.data == "proceed_wallet")
async def proceed_deal_wallet(callback: CallbackQuery, state: FSMContext):
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    if not user or not user.active_wallet:
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!", show_alert=True)
        return

    await state.update_data(ton_address=user.active_wallet)
    data = await state.get_data()
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer_photo(
        photo=FSInputFile("assets/link.png"),
        caption=f"üí≥–í—ã–±—Ä–∞–Ω–Ω—ã–π TON-–∞–¥—Ä–µ—Å:\n<code>{data["ton_address"]}</code>\n\nüîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫:",
        parse_mode=ParseMode.HTML,
        reply_markup=deal_address_keyboard_seller()
    )
    await state.set_state(SellerStates.wait_gift_name)


# --- –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ ---
@router.message(SellerStates.select_wallet_deal)
async def process_new_deal_wallet(message: Message, state: FSMContext):
    if not validate_ton_address(message.text):
        user = session.query(User).filter_by(telegram_id=message.from_user.id, ).first()
        wallets = user.wallets if user else []
        active_wallet = user.active_wallet if user else None
        text = (
                "‚ùóÔ∏è–ù–ï–í–ï–†–ù–´–ô —Ñ–æ—Ä–º–∞—Ç TON-–∞–¥—Ä–µ—Å–∞. <u><i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</i></u>‚ùóÔ∏è\n" +
                "üíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –ö–û–®–ï–õ–ï–ö –¥–ª—è —Å–¥–µ–ª–∫–∏ (–Ω–∞ –Ω–µ–≥–æ –ø—Ä–∏–¥—É—Ç –¢–û–ù—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è):</b>\n\n" +
                "\n".join([
                    f"{i + 1}.<code>{w}</code> {'‚úÖ' if w == active_wallet else ''}"
                    for i, w in enumerate(wallets)
                ]) +
                ("\nüò≠–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤" if not wallets else "") +
                "\n\nü§ù–ú–æ–∂–Ω–æ <i><b>–≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å</b></i> –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"
        )
        await message.answer_photo(
            photo=FSInputFile("assets/error.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
            caption=text,
            parse_mode=ParseMode.HTML,
            reply_markup=create_deal_wallet_selection(wallets, active_wallet)
        )
        return

    add_user_wallet(message.from_user.id, message.text)
    set_active_wallet(message.from_user.id, message.text)
    await state.update_data(ton_address=message.text)
    data = await state.get_data()
    await message.answer_photo(
        photo=FSInputFile("assets/link.png"),
        caption=f"üí≥–í—ã–±—Ä–∞–Ω–Ω—ã–π TON-–∞–¥—Ä–µ—Å:\n<code>{data["ton_address"]}</code>\n\nüîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫:",
        parse_mode=ParseMode.HTML,
        reply_markup=deal_address_keyboard_seller()
    )
    await state.set_state(SellerStates.wait_gift_name)


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ ---
@router.callback_query(F.data == "role_seller")
async def process_seller_role(callback: CallbackQuery, state: FSMContext):
    user = session.query(User).filter_by(telegram_id=callback.from_user.id).first()
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    wallets = user.wallets if user else []
    active_wallet = user.active_wallet if user else None

    text = (
            "üíº <b>–í—ã–±–µ—Ä–∏—Ç–µ –ö–û–®–ï–õ–ï–ö –¥–ª—è —Å–¥–µ–ª–∫–∏ (–Ω–∞ –Ω–µ–≥–æ –ø—Ä–∏–¥—É—Ç –¢–û–ù—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è):</b>\n\n" +
            "\n".join([
                f"{i + 1}.<code>{w}</code> {'‚úÖ' if w == active_wallet else ''}"
                for i, w in enumerate(wallets)
            ]) +
            ("\nüò≠–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤" if not wallets else "") +
            "\n\nü§ù–ú–æ–∂–Ω–æ <i><b>–≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å</b></i> –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"
    )

    await callback.message.answer_photo(
        photo=FSInputFile("assets/selectWallet.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption=text,
        parse_mode=ParseMode.HTML,
        reply_markup=create_deal_wallet_selection(wallets, active_wallet)
    )
    await state.set_state(SellerStates.select_wallet_deal)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@router.callback_query(F.data == "cancel_deal")
async def cancel_deal(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer(f"–°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await go_menu(callback.message, state)

@router.callback_query(F.data == "role_buyer")
async def process_buyer_role(callback: CallbackQuery, state: FSMContext):
    await state.update_data(ton_address="")
    await state.update_data(id="")
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer_photo(
        photo=FSInputFile("assets/link.png"),
        caption="üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫:")
    await state.set_state(SellerStates.wait_gift_name)


@router.message(SellerStates.wait_ton_address)
async def process_ton_address(message: Message, state: FSMContext):
    if not validate_ton_address(message.text):
        await message.answer_photo(
        photo=FSInputFile("assets/error.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TON-–∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
    add_user_wallet(message.from_user.id, message.text)
    set_active_wallet(message.from_user.id, message.text)  # –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞

    await state.update_data(ton_address=message.text)
    data = await state.get_data()

    if data["id"] != "":
        update_ton_address(data["id"], data["ton_address"])
        await message.bot.send_message(
            chat_id=data["seller_id"],
            text=f"TON –∞–¥—Ä–µ—Å –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
        )
        await message.bot.send_message(
            chat_id=data["buyer_id"],
            text=f"<b>üîó –û–ø–ª–∞—Ç–∞ –ø–æ —Å–¥–µ–ª–∫–µ #{data['id']}</b>\n"
                 f"üõçÔ∏è –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {data['gift_name']}\n"
                 f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{data['comission_price']} TON</b>\n"
                 f"<i>–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=create_start_payment_keyboard(data["id"])
        )
        await state.clear()
    else:
        await message.answer_photo(
            photo=FSInputFile("assets/link.png"),
            caption="üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫:",
        )
        await state.set_state(SellerStates.wait_gift_name)

@router.message(SellerStates.wait_gift_name)
async def process_gift_name(message: Message, state: FSMContext):
    if not validate_tg_nft_link(message.text):
        await message.answer_photo(
        photo=FSInputFile("assets/error.png"),  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É –∏–ª–∏ file_id [[1]]
        caption="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup = deal_address_keyboard_seller())
        return
    await state.update_data(gift_name=message.text)
    await message.answer_photo(
        photo=FSInputFile("assets/howMuch.png"),
        caption="üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–¥–∞—Ä–∫–∞ –≤ TON (–≤ —Ñ–æ—Ä–º–∞—Ç–µ 0.01):",
        reply_markup=deal_link_keyboard_seller()
    )
    await state.set_state(SellerStates.wait_price)


@router.message(SellerStates.wait_price)
async def process_price(message: Message, state: FSMContext):
    if not validate_price(message.text):
        await message.answer_photo(
        photo=FSInputFile("assets/howMuch.png"),
        caption="–¶–ï–ù–ê –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –ë–û–õ–¨–®–ï 0. \n<i>–î–ª—è –¥–µ—Å—è—Ç–∏—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '.'</i>\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
        reply_markup=deal_link_keyboard_seller())
        return

    data = await state.get_data()
    hex_id = generate_hex_id()
    await state.update_data(id=hex_id)
    await state.update_data(id=hex_id)
    if data["ton_address"]=="":
        await state.update_data(buyer_id=message.from_user.id)
        if float(message.text) <= 0.01:
            deal_id = save_deal(
                sdelka_id=hex_id,
                seller_id=None,
                buyer_id=message.from_user.id,
                ton_address=data["ton_address"],
                gift_name=data["gift_name"],
                price=float(message.text),
                comission_price = round(float(message.text) + 0.01, 6)
            )
        else:
            deal_id = save_deal(
                sdelka_id=hex_id,
                seller_id=None,
                buyer_id=message.from_user.id,
                ton_address=data["ton_address"],
                gift_name=data["gift_name"],
                price=float(message.text),
                comission_price = round(float(message.text) * (1 + float(os.getenv("COMMISSION_PERCENT"))), 6)
            )
    else:
        await state.update_data(seller_id=message.from_user.id)
        if float(message.text) <= 0.01:
            deal_id = save_deal(
                sdelka_id=hex_id,
                seller_id=message.from_user.id,
                buyer_id=None,
                ton_address=data["ton_address"],
                gift_name=data["gift_name"],
                price=float(message.text),
                comission_price = round(float(message.text) + 0.01, 6)
            )
        else:
            deal_id = save_deal(
                sdelka_id=hex_id,
                seller_id=message.from_user.id,
                buyer_id=None,
                ton_address=data["ton_address"],
                gift_name=data["gift_name"],
                price=float(message.text),
                comission_price = round(float(message.text) * (1 + float(os.getenv("COMMISSION_PERCENT"))), 6)
            )
    await state.clear()  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è [[6]]
    link = f"https://t.me/{Config.BOT_USERNAME}?start={hex_id}"
    deal = get_deal_by_hex(hex_id)
    await message.answer(
        f"<b>–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! #{hex_id}</b>\n\n"
        f"üõçÔ∏è NFT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {deal.gift_name}\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å NFT: {deal.price} TON\n"
        f"<i>(–∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ä–≤–∏—Å–∞ 5% –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å)</i>\n\n"
        f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å–æ –≤—Ç–æ—Ä—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–¥–µ–ª–∫–∏:\n{link}",
        parse_mode=ParseMode.HTML
    )
