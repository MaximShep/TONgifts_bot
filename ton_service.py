import requests
from config import Config
import re
import logging
import asyncio
from pytoniq import WalletV3R2, LiteBalancer  # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ WalletV3R1, WalletV3R2, WalletV4R1 WalletV4R2
from tonsdk.utils import to_nano, Address
from database.repository import update_address_buyer, check_refund_exists, create_refund, update_deal_status


class TonService:
    def __init__(self):
        self.base_url = "https://tonapi.io/v2/"
        self.headers = {
            "Authorization": f"Bearer {Config.TONAPI_TOKEN}",
            "Content-Type": "application/json"
        }
        self.provider = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LiteBalancer –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
        self.provider = LiteBalancer.from_mainnet_config()
        await self.provider.start_up()

    async def check_payment(self, hex_id: str, expected_ton: float) -> bool:
        # return True
        expected_amount = int(expected_ton * 10 ** 9)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º TON –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è HEX:", hex_id)
        url = f"https://tonapi.io/v2/blockchain/accounts/{Config.ADMIN_TON_ADDRESS}/transactions"

        try:
            response = requests.get(
                url,
                headers={"Authorization": f"Bearer {Config.TONAPI_TOKEN}"},
                params={"limit": 150}
            )
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ TonAPI: {response.status_code}")
                return False

            transactions = response.json().get("transactions", [])
            pattern = re.compile(rf"DEAL_{hex_id}|deal\s*#{hex_id}", re.IGNORECASE)

            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∏ —Å—É–º–º–æ–π
            for tx in transactions:
                in_msg = tx.get("in_msg", {})
                amount = in_msg.get("value", 0)
                comment = in_msg.get("decoded_body", {}).get("text", "")
                buyer_address = in_msg.get("source", {}).get("address", "")

                if pattern.search(comment) and amount == expected_amount:
                    print(f"‚úÖ –ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω: {tx['hash']}, —Å—É–º–º–∞: {amount / 10 ** 9} TON")
                    update_address_buyer(hex_id, buyer_address)
                    return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å –≤–µ—Ä–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –Ω–æ –ù–ï–í–ï–†–ù–û–ô –°–£–ú–ú–û–ô
            for tx in transactions:
                in_msg = tx.get("in_msg", {})
                idshnik = in_msg.get("hash", "")
                fee = in_msg.get("fwd_fee", 0)
                amount = in_msg.get("value", 0)
                comment = in_msg.get("decoded_body", {}).get("text", "")
                buyer_address = in_msg.get("source", {}).get("address", "")


                if pattern.search(comment) and amount < expected_amount:
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—É–º–º–∞: {amount / 10 ** 9} TON –≤–º–µ—Å—Ç–æ {expected_ton}")
                    if not check_refund_exists(idshnik):
                        create_refund(
                            deal_id=idshnik,
                            wallet_address=buyer_address,
                            refund_amount=((amount / 10 ** 9)-(fee/10**9)),
                        )
                        await self.refund_payment(buyer_address, ((amount / 10 ** 9)-(fee/10**9)))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É
                        update_deal_status(hex_id, "refunded_because_scam")
                        print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç {((amount / 10 ** 9)-(fee/10**9))} TON –Ω–∞ {buyer_address}")
                    else:
                        print('–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω')
                    return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å –≤–µ—Ä–Ω—ã–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –Ω–æ –ë–û–õ–¨–®–ï–ô –°–£–ú–ú–û–ô
            for tx in transactions:
                in_msg = tx.get("in_msg", {})
                idshnik = in_msg.get("hash", "")
                fee = in_msg.get("fwd_fee", 0)
                amount = in_msg.get("value", 0)
                comment = in_msg.get("decoded_body", {}).get("text", "")
                buyer_address = in_msg.get("source", {}).get("address", "")

                if pattern.search(comment) and amount > expected_amount:
                    print(f"‚ö†Ô∏è –°—É–º–º–∞ –±–æ–ª—å—à–µ. –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {amount / 10 ** 9} TON –≤–º–µ—Å—Ç–æ {expected_ton}")
                    if not check_refund_exists(idshnik):
                        create_refund(
                            deal_id=idshnik,
                            wallet_address=buyer_address,
                            refund_amount=((amount / 10 ** 9) - expected_ton - (fee / 10 ** 9)),
                        )
                        await self.refund_payment(buyer_address, (
                                    (amount / 10 ** 9) -expected_ton- (fee / 10 ** 9)))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É
                        update_deal_status(hex_id, "refunded_because_scam")
                        print(
                            f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç {((amount / 10 ** 9) - expected_ton - (fee / 10 ** 9))} TON –Ω–∞ {buyer_address}")
                    else:
                        print('–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω')
                    return True

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            for tx in transactions:
                in_msg = tx.get("in_msg", {})
                idshnik = in_msg.get("hash", "")
                fee = in_msg.get("fwd_fee", 0)
                amount = in_msg.get("value", 0)
                buyer_address = in_msg.get("source", {}).get("address", "")
                comment = in_msg.get("decoded_body", {}).get("text", "")

                if not comment.strip() and amount == expected_amount:
                    if not check_refund_exists(idshnik):
                        create_refund(
                            deal_id=idshnik,
                            wallet_address=buyer_address,
                            refund_amount=((amount / 10 ** 9)-(fee/10**9)),
                        )
                        await self.refund_payment(buyer_address, ((amount / 10 ** 9)-(fee/10**9)))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—É–º–º—É
                        print(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç {((amount / 10 ** 9)-(fee/10**9))} TON –Ω–∞ {buyer_address}")
                    return False

            print("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            return False

        except Exception as e:
            print(f"‚ùó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False

    # def check_payment(self, hex_id: str, expected_ton: float) -> bool:
    #     # return True
    #     expected_amount = int(expected_ton * 10**9)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º TON –≤ –Ω–∞–Ω–æ—Ç–æ–Ω—ã
    #     print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è HEX:", hex_id)
    #     url = f"https://tonapi.io/v2/blockchain/accounts/{Config.ADMIN_TON_ADDRESS}/transactions"
    #     try:
    #         response = requests.get(
    #             url,
    #             headers={"Authorization": f"Bearer {Config.TONAPI_TOKEN}"},
    #             params={"limit": 150}
    #         )
    #         if response.status_code != 200:
    #             print(f"–û—à–∏–±–∫–∞ TonAPI: {response.status_code}")
    #             return False
    #
    #         transactions = response.json().get("transactions", [])
    #         pattern = re.compile(rf"DEAL_{hex_id}|deal\s*#{hex_id}", re.IGNORECASE)
    #
    #         for tx in transactions:
    #             buyer_adress=tx.get("in_msg", {}).get("source", {}).get("address", "")
    #             comment = tx.get("in_msg", {}).get("decoded_body", {}).get("text", "")
    #             amount = tx.get("in_msg", {}).get("value", 0)
    #
    #             if pattern.search(comment) and amount == expected_amount:
    #                 print(f"–ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω: {tx['hash']}, —Å—É–º–º–∞: {amount/10**9} TON")
    #                 update_address_buyer(hex_id, buyer_adress)
    #                 return True
    #             elif pattern.search(comment):
    #                 print(f"–ù–∞–π–¥–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞: {amount/10**9} TON –≤–º–µ—Å—Ç–æ {expected_ton}")
    #
    #         print("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
    #         return False
    #     except Exception as e:
    #         print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    #         return False

    async def transfer_funds(self, to_address: str, amount_ton: float, deal_id: str) -> bool:
        # return True
        try:
            provider = LiteBalancer.from_mainnet_config(trust_level=1, timeout=10)
            await provider.start_up()

            # mnemonics_from = Config.MNEMONICS
            wallet = await WalletV3R2.from_mnemonic(provider,
                                                    Config.MNEMONICS)  # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ WalletV3R2 –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–µ—Ä—Å–∏–∏

            raw_address = wallet.address.to_str()
            address_obj = Address(raw_address)
            generated_user_friendly = address_obj.to_string(is_user_friendly=True, is_bounceable=False)
            generated_raw = address_obj.to_string(is_user_friendly=False, is_bounceable=False)
            generated_bounceable = address_obj.to_string(is_user_friendly=True, is_bounceable=True)

            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π User-friendly: {generated_user_friendly}")
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Raw: {generated_raw}")
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Bounceable: {generated_bounceable}")

            account_state = await provider.get_account_state(wallet.address)
            print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞: {account_state.state.type_}")
            print(f"–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {account_state.balance / 10 ** 9} TON")

            if account_state.state.type_ == "uninit":
                await provider.close_all()
                print("–û—à–∏–±–∫–∞: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (uninit). –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –±–∏—Ä–∂—É –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ TON.")
                return False

            balance = account_state.balance
            required_amount = to_nano(amount_ton, 'ton')
            if balance < required_amount:
                await provider.close_all()
                print(f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {balance / 10 ** 9} TON, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount_ton} TON")
                return False
            amount_nano = to_nano(amount_ton, 'ton')

            await wallet.transfer(
                destination=to_address,
                amount=amount_nano,
                body = deal_id
            )

            await provider.close_all()
            print(
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –•—ç—à –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ TON Explorer —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã. –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {generated_user_friendly}")
            return True

        except Exception as e:
            await provider.close_all()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
            return False

    async def refund_payment(self, to_address: int, amount_ton: float):
        try:
            provider = LiteBalancer.from_mainnet_config(trust_level=1, timeout=10)
            await provider.start_up()

            # mnemonics_from = Config.MNEMONICS
            wallet = await WalletV3R2.from_mnemonic(provider,
                                                    Config.MNEMONICS)  # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ WalletV3R2 –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–µ—Ä—Å–∏–∏

            raw_address = wallet.address.to_str()
            address_obj = Address(raw_address)
            generated_user_friendly = address_obj.to_string(is_user_friendly=True, is_bounceable=False)
            generated_raw = address_obj.to_string(is_user_friendly=False, is_bounceable=False)
            generated_bounceable = address_obj.to_string(is_user_friendly=True, is_bounceable=True)

            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π User-friendly: {generated_user_friendly}")
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Raw: {generated_raw}")
            print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Bounceable: {generated_bounceable}")

            account_state = await provider.get_account_state(wallet.address)
            print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞: {account_state.state.type_}")
            print(f"–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {account_state.balance / 10 ** 9} TON")

            if account_state.state.type_ == "uninit":
                await provider.close_all()
                print("–û—à–∏–±–∫–∞: –ö–æ—à–µ–ª–µ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (uninit). –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ —á–µ—Ä–µ–∑ –±–∏—Ä–∂—É –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ TON.")
                return False

            balance = account_state.balance
            required_amount = to_nano(amount_ton, 'ton')
            if balance < required_amount:
                await provider.close_all()
                print(f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å: {balance / 10 ** 9} TON, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {amount_ton} TON")
                return False
            amount_nano = to_nano(amount_ton, 'ton')

            await wallet.transfer(
                destination=to_address,
                amount=amount_nano
            )

            await provider.close_all()
            print(
                f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –•—ç—à –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ TON Explorer —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã. –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {generated_user_friendly}")
            return True

        except Exception as e:
            await provider.close_all()
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}")
            return False